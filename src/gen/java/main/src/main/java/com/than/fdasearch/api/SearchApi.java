/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.than.fdasearch.api;

import com.than.fdasearch.api.model.ApplicationSearchResult;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-08-02T10:15:18.406887400+03:00[Europe/Bucharest]")
@Validated
@Api(value = "search", description = "the search API")
public interface SearchApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /search : Search for applications
     *
     * @param manufacturer Manufacturer name (required)
     * @param substance Substance name (optional)
     * @param page Page (optional)
     * @param limit Results limit (optional)
     * @return successful operation (status code 200)
     *         or Server error (status code 500)
     */
    @ApiOperation(value = "Search for applications", nickname = "searchApplications", notes = "", response = ApplicationSearchResult.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ApplicationSearchResult.class),
        @ApiResponse(code = 500, message = "Server error") })
    @GetMapping(
        value = "/search",
        produces = { "application/json" }
    )
    default ResponseEntity<ApplicationSearchResult> searchApplications(@NotNull @ApiParam(value = "Manufacturer name", required = true) @Valid @RequestParam(value = "manufacturer", required = true) String manufacturer,@ApiParam(value = "Substance name") @Valid @RequestParam(value = "substance", required = false) String substance,@Min(1)@ApiParam(value = "Page") @Valid @RequestParam(value = "page", required = false) Integer page,@Min(1)@ApiParam(value = "Results limit") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pageElements\" : 1, \"payload\" : \"{}\", \"totalPages\" : 6, \"page\" : 0, \"totalElements\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
